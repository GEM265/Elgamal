Read Me 
In my Java implemented version of El Gamal, I implemented the packages, BigInteger, Random and Scanner only. I used import Java.math.BigInteger so I can do the primality test, bit manipulation and prime generation, as you can see in the next 3 functions created. I used the import Java.util.Random to generate random numbers. In the Boolean function, isPrime, I am using the Miller-Rabin test to do the primality test of n and k. I use an if statement to see if n is a prime number of k or not. In the next function, findPrime, I am trying to find a random prime number of the given bit length from the user. In the while loop, I am stating that while the prime number exists, it calls the isPrime function to check its primality. In the findGenerator method, I am finding a generator of the multiplicative group modulo ‘p’ where ‘p’ is a prime number. The while loop is used to incrementally find a generator. The encrypt method asks for the message(msg), the prime number(p), the generator (g), and the public key(y) to encrypt the message. It then generates a random ‘k’and computes ‘a’ as gk mod p and ‘b’ as msg * yk mod p, (a.k.a, the Square-and Multiply algorithm) this will then create a ciphertext. The decrypt function decrypts the ciphertext created in the function before. It takes the ciphertext (ctext), the prime number (p) and the private key ‘x’ as input. It then computes the secret ‘s’ as a(p-1-x) mod p and then returns the decrypted message as b * s mod p. To run the program, click the ‘Run|Debug’ on top of the main method on line 57. The code will ask you to enter the key size in bits, it generates the prime ‘p’ and generator ‘g’, then computes the public and private keys, encrypts the message entered by the user, decrypts the ciphertext and prints out the results (your message). 




